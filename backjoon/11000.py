#강의실 배정

#사용알고리즘: 힙(우선순위큐)

#조건
# 선생님 S. ~ T 에 끝나는 N개의 수업 모든수업을 가능하게
# 최소의 강의실을 사용해서


# 수업이 끝난직후에 다음 수업 시작 가능
#구현 아이디어

#이 시간동안 최소의 강의실을 사용
#s1    t1
#1  2  3             #수업1 t1 <= s3 일떄 강의실 1개로 계속 사용가능
#   s2    t2
#   2  3  4          #수업2 강의실 1개 사용
#      s3   t3
#      3  4  5       #수업3은 수업1을 이어서 강의실을 사용
#
#         s4          t4
#         4  5  6  7  8


 #시작 -> 힙에서 하나 꺼냄, (시작시간, 끝시간)

# 1. 시작 시간 ,끝 시간이 같거나 작은 수업이 있을 경우
# 강의실을 추가 하지 않음
# -> 이어서 그 강의실을 사용 하기 때문
# 해당(시작 시간, 끝시간)을 꺼냄

#2. 시작 시간과 끝 시간이 같거나 작은 수업이 없을 경우
# 해당 (시작 시간, 끝시간) 을 꺼냄
# 강의실 개수 추가

#3. 다음 시작 시간과 끝시간을 비교대상으로 갱신


import heapq
import sys
input = sys.stdin.readline

# N 수업 개수
n = int(input())
q = []
hp = []
for i in range(n):
    #(시작시간, 끝나는 시간) 입력
    s,t = map(int,input().split())
    q.append((s,t))
    #heapq.heappush(q, (s,t)) - > 힙으로 정렬하면 실패

q.sort()

#처음 수업 (끝나는 시간) 삽입
heapq.heappush(hp, q[0][1])

#다음 수업부터 반복
for i in range(1,n):

    #현재 수업이 끝나는 시간보다 다음 수업시작 시간이 빠른경우
    if q[i][0] < hp[0]:

        #강의실을 추가 -> 해당 수업 끝나는 시간 추가
        heapq.heappush(hp, q[i][1])

    #그게 아닐경우 현재 수업을 진행하는 강의실에서 계속 가능
    else:
        heapq.heappop(hp)
        heapq.heappush(hp, q[i][1])


print(len(hp))















